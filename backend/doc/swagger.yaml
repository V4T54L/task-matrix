openapi: 3.0.3
info:
  title: Project Management API
  version: 1.1.0
  description: API for user, project, and task management with JWT-based authentication.

servers:
  - url: http://localhost:8080

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        email:
          type: string
        avatar_url:
          type: string

    Status:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Priority:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date
        status:
          $ref: "#/components/schemas/Status"
        owner:
          $ref: "#/components/schemas/User"
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
        tasks_completed:
          type: integer
        total_tasks:
          type: integer

    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        priority:
          $ref: "#/components/schemas/Priority"
        status:
          $ref: "#/components/schemas/Status"
        assignee:
          $ref: "#/components/schemas/User"

    ProjectDetail:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date
        status:
          $ref: "#/components/schemas/Status"
        owner:
          $ref: "#/components/schemas/User"
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"

    SignupPayload:
      type: object
      required:
        - name
        - username
        - email
        - password
        - confirm_password
      properties:
        avatar_url:
          type: string
        name:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        confirm_password:
          type: string

    LoginPayload:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    ProjectPayload:
      type: object
      required:
        - name
        - description
        - due_date
        - status_id
      properties:
        name:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date
        status_id:
          type: integer

    TaskPayload:
      type: object
      required:
        - title
        - description
        - priority_id
        - status_id
        - assignee_id
      properties:
        title:
          type: string
        description:
          type: string
        priority_id:
          type: integer
        status_id:
          type: integer
        assignee_id:
          type: integer

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"

    MessageResponse:
      type: object
      properties:
        message:
          type: string

paths:
  /health:
    get:
      summary: Health check
      responses:
        "200":
          description: Server is healthy

  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginPayload"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/signup:
    post:
      summary: Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupPayload"
      responses:
        "201":
          description: Signup successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/validate:
    get:
      summary: Get logged-in user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Authenticated user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /projects:
    post:
      summary: Create Project
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectPayload"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

    get:
      summary: Get All Projects
      security:
        - BearerAuth: []
      responses:
        "200":
          description: All projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

  /projects/{id}:
    get:
      summary: View Project
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDetail"

    put:
      summary: Update Project
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectPayload"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

    delete:
      summary: Delete Project
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Project deleted

  /projects/{id}/members/{username}:
    post:
      summary: Add Member to Project
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Member added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /projects/{id}/members/{userID}:
    delete:
      summary: Remove Member from Project
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: userID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Member removed

  /projects/{projectId}/tasks:
    post:
      summary: Create Task
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskPayload"
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /projects/{projectId}/tasks/{taskId}:
    put:
      summary: Update Task
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskPayload"
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

    delete:
      summary: Delete Task
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Task deleted
